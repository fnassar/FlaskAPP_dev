# name: webapp_tests

# on:
#     push:
#         branches:
#             - "main"
#     pull_request:
#         branches:
#             - "main"

# jobs:
#     build:
#         runs-on: ubuntu-latest
#         defaults:
#             run:
#                 working-directory: .
#         timeout-minutes: 5
#         strategy:
#             matrix:
#                 python-version: ["3.12"]

#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v3

#             - name: Set up Python ${{ matrix.python-version }}
#               uses: actions/setup-python@v4
#               with:
#                   python-version: ${{ matrix.python-version }}

#             - name: Install dependencies
#               run: |
#                   python -m pip install --upgrade pip
#                   if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#             - name: Run tests
#               run: |
#                   python -m pytest tests
#     deploy:
#         needs: build
#         runs-on: ubuntu-latest

#         steps:
#             - name: Checkout source code
#               uses: actions/checkout@v2

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v1


# name: Continuous Deployment

# on:
#     push:
#         branches:
#             - "main"
#     pull_request:
#         branches:
#             - "main"

# jobs:
#     build:
#         runs-on: ubuntu-latest

#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2

#             - name: Log in to Docker Hub
#               uses: docker/login-action@v2
#               with:
#                   username: ${{ secrets.DOCKER_USERNAME }}
#                   password: ${{ secrets.DOCKER_PASSWORD }}

#             - name: Build and push Docker images
#               uses: docker/build-push-action@v3
#               with:
#                   context: .
#                   file: ./Dockerfile
#                   push: true
#                   tags: ${{ secrets.DOCKER_USERNAME }}/flaskapp_dev_web:latest

#             - name: Deploy to server
#               run: |
#                   echo "deployment depends on host."




# #########################################################

# name: CI/CD Pipeline

# on:
#     push:
#         branches:
#             - main
#     pull_request:
#         branches:
#             - "main"

# jobs:
#     build:
#         runs-on: ubuntu-latest

#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v1

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v1

#             - name: Log in to Amazon ECR
#               id: login-ecr
#               uses: aws-actions/amazon-ecr-login@v1
#               with:
#                   region: ${{ secrets.AWS_REGION }}
#                   access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#             - name: Cache Docker layers
#               uses: actions/cache@v2
#               with:
#                   path: /tmp/.buildx-cache
#                   key: ${{ runner.os }}-buildx-${{ github.sha }}
#                   restore-keys: |
#                       ${{ runner.os }}-buildx-

#             - name: Build and push Docker image
#               run: |
#                   docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache --platform linux/amd64 -t ${{ secrets.ECR_REGISTRY }}/my-flask-app:latest --push .

#     deploy:
#         runs-on: ubuntu-latest
#         needs: build

#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2

#             - name: Log in to Amazon ECR
#               uses: aws-actions/amazon-ecr-login@v1
#               with:
#                   region: ${{ secrets.AWS_REGION }}
#                   access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#             - name: Deploy to Amazon ECS
#               env:
#                   AWS_REGION: ${{ secrets.AWS_REGION }}
#                   ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
#                   ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
#                   IMAGE_TAG: latest
#                   ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#               run: |
#                   aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

#             - name: Rollback on Failure
#               if: failure()
#               env:
#                   AWS_REGION: ${{ secrets.AWS_REGION }}
#                   ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
#                   ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
#                   ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#               run: |
#                   echo "Deployment failed. Rolling back..."
#                   aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --desired-count 0
#                   aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --desired-count 1

#     notifications:
#         runs-on: ubuntu-latest
#         needs: [build, deploy]

#         steps:
#             - name: Send notification on failure
#               if: failure()
#               run: |
#                   echo "Build or deployment failed. Sending notification..."
#                   # Add your notification script here (e.g., Slack, email)

# -i https://pypi.python.org/simple/
# alembic==1.5.8
# blinker==1.8.2 # 1.4
# click==8.1.7 # 7.1.2
# cssmin==0.2.0
# email-validator==1.1.2
# flask-assets==2.1.0 # 0.12
# flask-caching==1.7.2
# flask-ckeditor==0.4.3
# flask-debugtoolbar==0.10.1
# flask-dropzone==1.5.3
# flask-mail==0.9.1
# flask-migrate==2.5.2
# flask-sqlalchemy==2.5.1
# flask-wtf==0.14.2
# flask==3.0.3 # 1.0
# greenlet==3.0.3 ; python_version >= '3' #changed from 1.0.0
# itsdangerous==2.2.0 # 1.1.0
# jinja2==3.1.4 # 2.11.3
# # jsmin==2.2.2
# rjsmin==1.2.2
# mako==1.1.4
# markupsafe==2.1.5 # 1.1.1
# python-dateutil==2.8.1
# python-dotenv==0.10.3
# python-editor==1.0.4
# python-http-client==3.3.2
# redis==3.2.1
# sendgrid==6.0.5
# six==1.16.0 # 1.15.0
# sqlalchemy==1.4.3
# webassets==2.0
# werkzeug==3.0.3 # 0.16.1
# wtforms==2.3.3
# setuptools==71.1.0 # my additions